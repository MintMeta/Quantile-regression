#####################################################
#                    BIBLIOTEKOS                    #  
#####################################################

library(ggplot2)
library(dplyr)
library(tidyr)
library(corrplot)
library(car)
library(quantreg)
library(patchwork)
library(performance)

data("diamonds")  # Iš ggplot2 paketo

#####################################################
#     Tikrinam ar yra nulinių ir NA reikšmių        #
#     Priklausomo kintamojo pasiskirstymo grafikas  #
#####################################################

colSums(diamonds == 0)
colSums(is.na(diamonds))
hist(diamonds$price, breaks = 50, main = "Histogram of Price", xlab = "Price", col = "cadetblue3", border = "black")


#####################################################
#                  Sklaidos diagramos               #  
#####################################################


p1 <- ggplot(diamonds, aes(x = carat, y = price)) +
  geom_point(shape = 21, fill = "cadetblue3", color = "black") +
  ggtitle("Diamonds: Price vs. Carat") + theme_bw()

p2 <- ggplot(diamonds, aes(x = depth, y = price)) +
  geom_point(shape = 21, fill = "cadetblue3", color = "black") +
  ggtitle("Diamonds: Price vs. Depth") + theme_bw()

p3 <- ggplot(diamonds, aes(x = table, y = price)) +
  geom_point(shape = 21, fill = "cadetblue3", color = "black") +
  ggtitle("Diamonds: Price vs. Table") + theme_bw()

p4 <- ggplot(diamonds, aes(x = x, y = price)) +
  geom_point(shape = 21, fill = "cadetblue3", color = "black") +
  ggtitle("Diamonds: Price vs. X") + theme_bw()

p5 <- ggplot(diamonds, aes(x = y, y = price)) +
  geom_point(shape = 21, fill = "cadetblue3", color = "black") +
  ggtitle("Diamonds: Price vs. Y") + theme_bw()

p6 <- ggplot(diamonds, aes(x = z, y = price)) +
  geom_point(shape = 21, fill = "cadetblue3", color = "black") +
  ggtitle("Diamonds: Price vs. Z") + theme_bw()

(p1 | p2 | p3) /
(p4 | p5 | p6)

#####################################################
#                 Stačiakampės diagramos            #  
#####################################################

p11 <- ggplot(diamonds, aes(x = cut, y = price)) + 
  geom_boxplot(fill = "cadetblue3", color = "black", alpha = 0.6) +
  ggtitle("Diamonds: Price vs. Cut") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

p12 <- ggplot(diamonds, aes(x = color, y = price)) + 
  geom_boxplot(fill = "cadetblue3", color = "black", alpha = 0.6) +
  ggtitle("Diamonds: Price vs. Color") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

p13 <- ggplot(diamonds, aes(x = clarity, y = price)) + 
  geom_boxplot(fill = "cadetblue3", color = "black", alpha = 0.6) +
  ggtitle("Diamonds: Price vs. Clarity") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

(p11 | p12 | p13)

#####################################################
#              Multikolinearumo patikra             #  
#####################################################

numeric_X <- diamonds %>%
  select(carat, depth, table, x, y, z)

cor_matrix <- cor(numeric_X)

corrplot(
  cor_matrix,
  method = "color",
  col = colorRampPalette(c("white", "cadetblue3", "darkslateblue"))(200),
  addCoef.col = "white",      # koreliacijos skaičių spalva
  tl.col = "black",           # kintamųjų pavadinimų spalva
  outline = TRUE              # juodi krašteliai aplink langelius
)

lm_model <- lm(price ~ carat + depth + table + color + cut + clarity, data = diamonds)
check_collinearity(lm_model)

#####################################################
#   Duomenų dalyba į mokymo ir testavimo aibes      #  
#####################################################

set.seed(123)
n <- nrow(diamonds)
test_idx <- sample(1:n, size = round(0.1 * n), replace = FALSE)

train_data <- diamonds[-test_idx, ]
test_data <- diamonds[test_idx, ]

#####################################################
#                 Kvantilių regresija               #  
#####################################################

taus <- seq(0.1, 0.9, by = 0.1)
mse_values <- numeric(length(taus))

for (i in seq_along(taus)) {
  tau <- taus[i]
  model <- rq(price ~ carat + depth + table + color + cut + clarity, tau = tau, data = train_data)
  preds <- predict(model, newdata = test_data)
  mse_values[i] <- mean((test_data$price - preds)^2)
}

barplot(mse_values, names.arg = taus, main = "MSE vs Tau", xlab = "Tau", ylab = "MSE", col = "cadetblue3", border = "black")

#####################################################
#        Empirinių  tikimybių palyginimas           #  
#####################################################

empirical_probs <- numeric(length(taus))

for (i in seq_along(taus)) {
  tau <- taus[i]
  model <- rq(price ~ carat + depth + table + color + cut + clarity, tau = tau, data = train_data)
  preds <- predict(model, newdata = test_data)
  empirical_probs[i] <- mean(test_data$price <= preds)
}

par(mfrow = c(1, 2),    # 1 eilė, 2 grafikai
    mar = c(5, 5, 4, 2) # didesnės paraštės
)

plot(taus, empirical_probs,
     type = "b",
     col = "black",
     pch = 21,             # tuščiaviduris apskritimas su užpildu
     bg = "cadetblue3",       # užpildo spalva
     cex = 1.8,            # taškų dydis
     lwd = 3,              # linijos storis
     ylim = c(0,1),
     ylab = "Empirical probability",
     xlab = "Tau",
     main = "Empirical vs Theoretical",
     panel.first = grid(col = "grey80", lty = 1) # tinklas
)
abline(0, 1, col = "red", lwd = 2, lty = 2)

#####################################################
#        Empirinių  tikimybių skirtumas             #  
#####################################################

plot(taus, empirical_probs - taus,
     type = "b",
     col = "black",
     pch = 21,
     bg = "cadetblue3",
     cex = 1.8,
     lwd = 3,
     ylab = "Empirical - Theoretical",
     xlab = "Tau",
     main = "Difference",
     panel.first = grid(col = "grey80", lty = 1)
)
abline(h = 0, col = "red", lwd = 2, lty = 2)

#####################################################
#   Kvantilių nuostolių funkcijos skaičiavimas      #  
#####################################################

quantile_loss <- function(y, y_pred, tau) {
  e <- y - y_pred
  return(mean(ifelse(e >= 0, tau * e, (tau - 1) * e)))
}

loss_values <- numeric(length(taus))

for (i in seq_along(taus)) {
  tau <- taus[i]
  model <- rq(price ~ carat + depth + table + color + cut + clarity, tau = tau, data = train_data)
  preds <- predict(model, newdata = test_data)
  loss_values[i] <- quantile_loss(test_data$price, preds, tau)
}

barplot(loss_values, names.arg = taus, main = "Quantile Loss vs Tau", xlab = "Tau", ylab = "Loss", col = "cadetblue3", border = "black")

#####################################################
#      Kvantilių regresijos sklaidos diagramos      #  
#####################################################


plot_quantile_vs_ols <- function(xvar, data, xlab = NULL, title = NULL) {
  ggplot(data, aes_string(x = xvar, y = "price")) +
    geom_point(shape = 21, fill = "cadetblue3", color = "black", stroke = 0.3, alpha = 0.6) +
    stat_smooth(method = "lm", aes(color = "OLS"), size = 1.2, se = FALSE) +
    geom_quantile(quantiles = 0.1, aes(color = "Quantile 0.1"), size = 1.2) +
    geom_quantile(quantiles = 0.6, aes(color = "Quantile 0.6"), size = 1.2) +
    geom_quantile(quantiles = 0.9, aes(color = "Quantile 0.9"), size = 1.2) +
    scale_color_manual(name = "Model",
                       values = c("OLS" = "orange",
                                  "Quantile 0.1" = "red",
                                  "Quantile 0.6" = "green",
                                  "Quantile 0.9" = "purple")) +
    coord_cartesian(
      xlim = c(0, quantile(data[[xvar]], 0.99, na.rm = TRUE)),
      ylim = c(0, quantile(data$price, 0.99, na.rm = TRUE))
    ) +
    labs(
      x = ifelse(is.null(xlab), xvar, xlab),
      y = "Price",
      title = ifelse(is.null(title),
                     paste("Price vs", xvar, "- OLS and Quantile regression"),
                     title)
    ) +
    theme_minimal()
}
plot_quantile_vs_ols("carat", diamonds)
plot_quantile_vs_ols("depth", diamonds)
plot_quantile_vs_ols("table", diamonds)

